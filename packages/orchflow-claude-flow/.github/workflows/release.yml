name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      
      - name: Validate version
        id: version
        run: |
          VERSION=${{ github.event.inputs.version }}
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
      
      - name: Check if tag exists
        run: |
          if git rev-parse "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
            echo "Tag ${{ steps.version.outputs.tag }} already exists"
            exit 1
          fi
      
      - name: Update package.json version
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
          git push
      
      - name: Generate changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          version-file: './package.json'
          output-file: 'CHANGELOG.md'
          preset: 'angular'
          skip-version-file: true
          skip-commit: true
      
      - name: Create Release Notes
        run: |
          cat > release-notes.md << EOF
          # OrchFlow Claude-Flow v${{ steps.version.outputs.version }}
          
          ## What's Changed
          ${{ steps.changelog.outputs.clean_changelog }}
          
          ## Installation
          \`\`\`bash
          npm install -g orchflow-claude-flow@${{ steps.version.outputs.version }}
          \`\`\`
          
          ## Docker
          \`\`\`bash
          docker pull orchflow/claude-flow:${{ steps.version.outputs.version }}
          \`\`\`
          
          ## Checksums
          Will be added after build completion.
          EOF
      
      - name: Upload release notes
        uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: release-notes.md

  build-release:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: prepare-release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run tests
        run: npm test
      
      - name: Build
        run: NODE_ENV=production npm run build
      
      - name: Package binary
        run: |
          npm install -g pkg
          pkg . --output orchflow-${{ matrix.os }}-${{ matrix.node-version }}
      
      - name: Create tarball
        run: |
          tar -czf orchflow-${{ needs.prepare-release.outputs.version }}-${{ matrix.os }}.tar.gz dist/
      
      - name: Generate checksums
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            sha256sum orchflow-*.tar.gz > checksums-${{ matrix.os }}.txt
          else
            shasum -a 256 orchflow-*.tar.gz > checksums-${{ matrix.os }}.txt
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.os }}
          path: |
            orchflow-*.tar.gz
            checksums-*.txt
            orchflow-${{ matrix.os }}-*

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Merge checksums
        run: |
          cat release-*/checksums-*.txt > checksums.txt
          echo "" >> release-notes/release-notes.md
          echo "### Checksums" >> release-notes/release-notes.md
          echo "\`\`\`" >> release-notes/release-notes.md
          cat checksums.txt >> release-notes/release-notes.md
          echo "\`\`\`" >> release-notes/release-notes.md
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          name: v${{ needs.prepare-release.outputs.version }}
          body_path: release-notes/release-notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            release-*/*
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Build
        run: NODE_ENV=production npm run build
      
      - name: Publish
        run: |
          if [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            npm publish --tag beta
          else
            npm publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-docker:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            orchflow/claude-flow:${{ needs.prepare-release.outputs.version }}
            orchflow/claude-flow:latest
            ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.version }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max