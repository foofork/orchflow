name: OrchFlow Upgrade Testing Pipeline

on:
  push:
    branches: [upgrade/*, main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      phase:
        description: 'Which phase to test (1-4 or all)'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - '1'
          - '2'
          - '3'
          - '4'

env:
  NODE_VERSION: '18'
  RUST_VERSION: 'stable'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      should-run-phase1: ${{ steps.determine-phases.outputs.phase1 }}
      should-run-phase2: ${{ steps.determine-phases.outputs.phase2 }}
      should-run-phase3: ${{ steps.determine-phases.outputs.phase3 }}
      should-run-phase4: ${{ steps.determine-phases.outputs.phase4 }}
    steps:
      - name: Determine phases to run
        id: determine-phases
        run: |
          PHASE="${{ github.event.inputs.phase || 'all' }}"
          if [ "$PHASE" = "all" ]; then
            echo "phase1=true" >> $GITHUB_OUTPUT
            echo "phase2=true" >> $GITHUB_OUTPUT
            echo "phase3=true" >> $GITHUB_OUTPUT
            echo "phase4=true" >> $GITHUB_OUTPUT
          else
            echo "phase1=${{ github.event.inputs.phase == '1' }}" >> $GITHUB_OUTPUT
            echo "phase2=${{ github.event.inputs.phase == '2' }}" >> $GITHUB_OUTPUT
            echo "phase3=${{ github.event.inputs.phase == '3' }}" >> $GITHUB_OUTPUT
            echo "phase4=${{ github.event.inputs.phase == '4' }}" >> $GITHUB_OUTPUT
          fi

  phase1-security:
    needs: setup
    if: needs.setup.outputs.should-run-phase1 == 'true'
    runs-on: ubuntu-latest
    name: "üî¥ Phase 1: Security Testing"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
          override: true
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Install dependencies
        run: |
          npm ci
          cargo fetch
      
      - name: Create test database
        run: |
          mkdir -p .test-data
          touch .test-data/test_security.db
      
      - name: Run Phase 1 Security Tests
        run: ./scripts/test-phase1-security.sh
        env:
          CI: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase1-security-reports
          path: reports/phase1-security-report.md
          retention-days: 30

  phase2-frameworks:
    needs: [setup, phase1-security]
    if: needs.setup.outputs.should-run-phase2 == 'true' && (success() || needs.setup.outputs.should-run-phase1 == 'false')
    runs-on: ubuntu-latest
    name: "üîß Phase 2: Framework Migration"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
      
      - name: Install dependencies
        run: |
          npm ci
          cargo fetch
      
      - name: Run Phase 2 Framework Tests
        run: ./scripts/test-phase2-frameworks.sh
        env:
          CI: true
      
      - name: Upload framework reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase2-framework-reports
          path: reports/phase2-framework-report.md
          retention-days: 30

  phase3-modernization:
    needs: [setup, phase2-frameworks]
    if: needs.setup.outputs.should-run-phase3 == 'true' && (success() || needs.setup.outputs.should-run-phase2 == 'false')
    runs-on: ubuntu-latest
    name: "üéØ Phase 3: Modernization"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Rust
        uses: actions/setup-node@v4
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
      
      - name: Install Tauri CLI
        run: |
          npm install -g @tauri-apps/cli
          cargo install tauri-cli || true
      
      - name: Install dependencies
        run: |
          npm ci
          cargo fetch
      
      - name: Run Phase 3 Modernization Tests
        run: ./scripts/test-phase3-modernization.sh
        env:
          CI: true
      
      - name: Upload modernization reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase3-modernization-reports
          path: reports/phase3-modernization-report.md
          retention-days: 30

  phase4-ecosystem:
    needs: [setup, phase3-modernization]
    if: needs.setup.outputs.should-run-phase4 == 'true' && (success() || needs.setup.outputs.should-run-phase3 == 'false')
    runs-on: ubuntu-latest
    name: "üîç Phase 4: Ecosystem"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
          override: true
      
      - name: Install dependencies
        run: |
          npm ci
          cargo fetch
      
      - name: Run Phase 4 Ecosystem Tests
        run: ./scripts/test-phase4-ecosystem.sh
        env:
          CI: true
      
      - name: Upload ecosystem reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase4-ecosystem-reports
          path: reports/phase4-ecosystem-report.md
          retention-days: 30

  complete-pipeline:
    needs: [setup, phase1-security, phase2-frameworks, phase3-modernization, phase4-ecosystem]
    if: always() && needs.setup.outputs.should-run-phase1 == 'true' && needs.setup.outputs.should-run-phase2 == 'true' && needs.setup.outputs.should-run-phase3 == 'true' && needs.setup.outputs.should-run-phase4 == 'true'
    runs-on: ubuntu-latest
    name: "üìä Complete Pipeline Report"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all reports
        uses: actions/download-artifact@v5
        with:
          path: reports/
      
      - name: Generate complete report
        run: |
          mkdir -p final-reports
          {
            echo "# OrchFlow Upgrade Testing - CI/CD Report"
            echo "Generated: $(date)"
            echo "Workflow run: ${{ github.run_number }}"
            echo "Commit: ${{ github.sha }}"
            echo ""
            echo "## Phase Results"
            echo "- Phase 1 Security: ${{ needs.phase1-security.result }}"
            echo "- Phase 2 Framework: ${{ needs.phase2-frameworks.result }}"
            echo "- Phase 3 Modernization: ${{ needs.phase3-modernization.result }}"
            echo "- Phase 4 Ecosystem: ${{ needs.phase4-ecosystem.result }}"
            echo ""
            echo "## Overall Status"
            if [ "${{ needs.phase1-security.result }}" = "success" ] && \
               [ "${{ needs.phase2-frameworks.result }}" = "success" ] && \
               [ "${{ needs.phase3-modernization.result }}" = "success" ] && \
               [ "${{ needs.phase4-ecosystem.result }}" = "success" ]; then
              echo "‚úÖ **ALL PHASES PASSED** - Ready for deployment"
            else
              echo "‚ùå **SOME PHASES FAILED** - Review required"
            fi
            echo ""
            echo "## Individual Reports"
            echo "See artifacts for detailed phase reports"
          } > final-reports/ci-cd-summary.md
      
      - name: Upload complete report
        uses: actions/upload-artifact@v4
        with:
          name: complete-pipeline-report
          path: final-reports/
          retention-days: 90

  notify-success:
    needs: [complete-pipeline]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Success notification
        run: |
          echo "üéâ OrchFlow upgrade testing completed successfully!"
          echo "All phases passed. Ready for production deployment."

  notify-failure:
    needs: [phase1-security, phase2-frameworks, phase3-modernization, phase4-ecosystem]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Failure notification
        run: |
          echo "‚ùå OrchFlow upgrade testing failed!"
          echo "Please check the failed phase logs and reports."
          exit 1