// Fix for the failing tests in GitPanel.test.ts
// These are the corrected versions of the failing tests

describe('Push/Pull Operations', () => {
  it('pushes changes', async () => {
    // Clear any previous calls and setup fresh mocks
    vi.clearAllMocks();
    mockInvoke
      .mockResolvedValueOnce(mockGitStatus) // Initial load
      .mockResolvedValueOnce(undefined) // git_push call
      .mockResolvedValueOnce(mockGitStatus); // Refresh
    
    const { container } = render(GitPanel, { props: { show: true } });
    
    await waitFor(() => {
      const pushBtn = container.querySelector('.push-btn');
      expect(pushBtn).toBeTruthy();
    }, { timeout: 1000 });
    
    const pushBtn = container.querySelector('.push-btn') as HTMLElement;
    await fireEvent.click(pushBtn);
    
    await waitFor(() => {
      expect(mockInvoke).toHaveBeenCalledWith('git_push');
    }, { timeout: 1000 });
  });

  it('pulls changes', async () => {
    // Clear any previous calls and setup fresh mocks
    vi.clearAllMocks();
    mockInvoke
      .mockResolvedValueOnce(mockGitStatus) // Initial load
      .mockResolvedValueOnce(undefined) // git_pull call
      .mockResolvedValueOnce(mockGitStatus); // Refresh
    
    const { container } = render(GitPanel, { props: { show: true } });
    
    await waitFor(() => {
      const pullBtn = container.querySelector('.pull-btn');
      expect(pullBtn).toBeTruthy();
    }, { timeout: 1000 });
    
    const pullBtn = container.querySelector('.pull-btn') as HTMLElement;
    await fireEvent.click(pullBtn);
    
    await waitFor(() => {
      expect(mockInvoke).toHaveBeenCalledWith('git_pull');
    }, { timeout: 1000 });
  });

  it('shows error alert on push failure', async () => {
    const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});
    window.alert = vi.fn();
    
    // Clear and setup fresh mocks
    vi.clearAllMocks();
    mockInvoke
      .mockResolvedValueOnce(mockGitStatus) // Initial load
      .mockRejectedValueOnce(new Error('Network error')); // git_push fails
    
    const { container } = render(GitPanel, { props: { show: true } });
    
    await waitFor(() => {
      const pushBtn = container.querySelector('.push-btn');
      expect(pushBtn).toBeTruthy();
    }, { timeout: 1000 });
    
    const pushBtn = container.querySelector('.push-btn') as HTMLElement;
    await fireEvent.click(pushBtn);
    
    await waitFor(() => {
      expect(window.alert).toHaveBeenCalledWith('Push failed: Network error');
    }, { timeout: 1000 });
    
    consoleSpy.mockRestore();
  });
});

describe('Panel Behavior', () => {
  it('auto-refreshes status every 5 seconds', async () => {
    vi.useFakeTimers();
    
    // Setup a mock that always resolves to avoid any timing issues
    mockInvoke.mockImplementation(() => Promise.resolve(mockGitStatus));
    
    const { unmount } = render(GitPanel, { props: { show: true } });
    
    // Wait for initial load
    await vi.waitFor(() => {
      expect(mockInvoke).toHaveBeenCalledWith('git_status');
    });
    
    const initialCalls = mockInvoke.mock.calls.length;
    
    // Fast-forward 5 seconds
    await vi.advanceTimersByTimeAsync(5000);
    
    // Should have called git_status again
    expect(mockInvoke).toHaveBeenCalledTimes(initialCalls + 1);
    
    unmount();
    vi.useRealTimers();
  });
});

describe('Error Handling', () => {
  it('handles stage error', async () => {
    const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});
    
    // Clear and setup fresh mocks
    vi.clearAllMocks();
    mockInvoke
      .mockResolvedValueOnce(mockGitStatus) // Initial load
      .mockRejectedValueOnce(new Error('Permission denied')); // git_stage fails
    
    const { container } = render(GitPanel, { props: { show: true } });
    
    await waitFor(() => {
      const stageBtn = container.querySelector('.stage-btn');
      expect(stageBtn).toBeTruthy();
    }, { timeout: 1000 });
    
    const stageBtn = container.querySelector('.stage-btn') as HTMLElement;
    await fireEvent.click(stageBtn);
    
    await waitFor(() => {
      expect(consoleSpy).toHaveBeenCalledWith('Failed to stage file:', expect.any(Error));
    }, { timeout: 1000 });
    
    consoleSpy.mockRestore();
  });
});