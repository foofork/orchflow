name: QA & Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'unit'
          - 'integration'
          - 'e2e'
          - 'visual'
          - 'performance'

env:
  NODE_VERSION: '20'
  RUST_VERSION: '1.75'
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build and basic checks
  build:
    name: Build & Type Check
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=build-${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            build-${{ runner.os }}-node${{ env.NODE_VERSION }}-

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run check

      - name: Lint code
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            build
            .svelte-kit
          key: build-artifacts-${{ github.sha }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/
          retention-days: 7

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.test_type == '' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.build.outputs.cache-key }}

      - name: Install dependencies (if cache miss)
        run: npm ci --prefer-offline

      - name: Run unit tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          directory: coverage/
          flags: unit-tests
          name: unit-test-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            test-results/
            coverage/
          retention-days: 7

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.test_type == '' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.build.outputs.cache-key }}

      - name: Install dependencies (if cache miss)
        run: npm ci --prefer-offline

      - name: Restore build artifacts cache
        uses: actions/cache@v4
        with:
          path: |
            build
            .svelte-kit
          key: build-artifacts-${{ github.sha }}

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results/
          retention-days: 7

  # E2E tests with parallel execution
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.test_type == '' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'e2e'
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]  # Parallel execution across 4 shards
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.build.outputs.cache-key }}

      - name: Install dependencies (if cache miss)
        run: npm ci --prefer-offline

      - name: Restore build artifacts cache
        uses: actions/cache@v4
        with:
          path: |
            build
            .svelte-kit
          key: build-artifacts-${{ github.sha }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libnss3-dev \
            libgconf-2-4 \
            libxss1 \
            libasound2 \
            libxtst6 \
            libatk-bridge2.0-0 \
            libgtk-3-0 \
            libdrm2 \
            libxkbcommon0 \
            libatspi2.0-0 \
            libxcomposite1 \
            libxdamage1 \
            libxrandr2 \
            libgbm1 \
            libxss1 \
            libasound2

      - name: Run E2E tests (smoke)
        if: matrix.shard == 1
        run: npm run test:e2e:smoke
        env:
          NODE_ENV: test
          CI: true
          VITEST_SHARD: ${{ matrix.shard }}
          VITEST_POOL_SIZE: 4

      - name: Run E2E tests (critical)
        if: matrix.shard == 2
        run: npm run test:e2e:critical
        env:
          NODE_ENV: test
          CI: true
          VITEST_SHARD: ${{ matrix.shard }}
          VITEST_POOL_SIZE: 4

      - name: Run E2E tests (regression)
        if: matrix.shard == 3
        run: npm run test:e2e:regression
        env:
          NODE_ENV: test
          CI: true
          VITEST_SHARD: ${{ matrix.shard }}
          VITEST_POOL_SIZE: 4

      - name: Run E2E tests (full parallel)
        if: matrix.shard == 4
        run: npm run test:e2e:parallel
        env:
          NODE_ENV: test
          CI: true
          VITEST_SHARD: ${{ matrix.shard }}
          VITEST_POOL_SIZE: 4

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-shard-${{ matrix.shard }}
          path: |
            test-results/
            tests/e2e/screenshots/
            tests/e2e/videos/
            tests/e2e/traces/
          retention-days: 7

  # Visual regression testing with Playwright
  visual-tests:
    name: Visual Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.test_type == '' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'visual'
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.build.outputs.cache-key }}

      - name: Install dependencies (if cache miss)
        run: npm ci --prefer-offline

      - name: Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ matrix.browser }}-${{ hashFiles('package-lock.json') }}

      - name: Restore build artifacts cache
        uses: actions/cache@v4
        with:
          path: |
            build
            .svelte-kit
          key: build-artifacts-${{ github.sha }}

      - name: Run visual tests
        run: npm run test:visual -- --project=${{ matrix.browser }}
        env:
          NODE_ENV: test
          CI: true

      - name: Upload visual test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-results-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
            tests/visual/screenshots/
          retention-days: 7

      - name: Upload visual regression failures
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-diff-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Performance testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.test_type == '' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.build.outputs.cache-key }}

      - name: Install dependencies (if cache miss)
        run: npm ci --prefer-offline

      - name: Restore build artifacts cache
        uses: actions/cache@v4
        with:
          path: |
            build
            .svelte-kit
          key: build-artifacts-${{ github.sha }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.15.1

      - name: Run Vitest performance tests
        run: npm run test:performance
        env:
          NODE_ENV: test

      - name: Run Lighthouse CI
        run: npm run lighthouse
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run benchmark tests
        run: npm run bench:report
        env:
          NODE_ENV: test

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports
          path: |
            .lighthouseci/
            test-results/
          retention-days: 30

  # Mutation testing
  mutation-tests:
    name: Mutation Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.build.outputs.cache-key }}

      - name: Install dependencies (if cache miss)
        run: npm ci --prefer-offline

      - name: Run mutation tests
        run: npm run test:mutation:ci
        env:
          NODE_ENV: test

      - name: Upload mutation test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mutation-test-results
          path: |
            reports/mutation/
            test-results/
          retention-days: 14

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.build.outputs.cache-key }}

      - name: Install dependencies (if cache miss)
        run: npm ci --prefer-offline

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run security tests
        run: npm run test:audit
        continue-on-error: true

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality

      - name: Build for CodeQL
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  # Tauri build test (optional)
  tauri-build:
    name: Tauri Build Test
    runs-on: ${{ matrix.platform }}
    needs: build
    if: contains(github.event.head_commit.message, '[test-tauri]')
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.build.outputs.cache-key }}

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install dependencies (if cache miss)
        run: npm ci --prefer-offline

      - name: Build Tauri app
        run: npm run tauri:build

  # Test results aggregation
  test-results:
    name: Aggregate Test Results
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, visual-tests, performance-tests]
    if: always()
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./test-artifacts

      - name: Generate test summary
        run: |
          echo "# 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Status Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status | Artifacts |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | [View Results](./test-artifacts/unit-test-results/) |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | [View Results](./test-artifacts/integration-test-results/) |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | [View Results](./test-artifacts/e2e-test-results-*/) |" >> $GITHUB_STEP_SUMMARY
          echo "| Visual Tests | ${{ needs.visual-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | [View Results](./test-artifacts/visual-test-results-*/) |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | [View Reports](./test-artifacts/performance-reports/) |" >> $GITHUB_STEP_SUMMARY

      - name: Upload aggregated results
        uses: actions/upload-artifact@v4
        with:
          name: all-test-results
          path: ./test-artifacts/
          retention-days: 30

  # Quality gates with comprehensive checks
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [build, unit-tests, integration-tests, e2e-tests, visual-tests, performance-tests, security-scan]
    if: always()
    steps:
      - name: Set quality gate status
        id: gate-check
        run: |
          # Core requirements (must pass)
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "reason=Build failed" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [[ "${{ needs.unit-tests.result }}" != "success" ]] && [[ "${{ needs.unit-tests.result }}" != "skipped" ]]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "reason=Unit tests failed" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Allow some test types to be optional based on trigger
          FAILED_TESTS=""
          
          if [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
            FAILED_TESTS="$FAILED_TESTS integration"
          fi
          
          if [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            FAILED_TESTS="$FAILED_TESTS e2e"
          fi
          
          if [[ "${{ needs.visual-tests.result }}" == "failure" ]]; then
            FAILED_TESTS="$FAILED_TESTS visual"
          fi
          
          if [[ "${{ needs.performance-tests.result }}" == "failure" ]]; then
            FAILED_TESTS="$FAILED_TESTS performance"
          fi
          
          # On main branch, all tests must pass
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] && [[ -n "$FAILED_TESTS" ]]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "reason=Tests failed on main branch: $FAILED_TESTS" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # On PR, allow performance tests to be warnings
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            CRITICAL_FAILED=""
            if [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
              CRITICAL_FAILED="$CRITICAL_FAILED integration"
            fi
            if [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
              CRITICAL_FAILED="$CRITICAL_FAILED e2e"
            fi
            
            if [[ -n "$CRITICAL_FAILED" ]]; then
              echo "status=failed" >> $GITHUB_OUTPUT
              echo "reason=Critical tests failed: $CRITICAL_FAILED" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          echo "status=passed" >> $GITHUB_OUTPUT
          echo "reason=All quality gates passed" >> $GITHUB_OUTPUT

      - name: Quality gate result
        run: |
          if [[ "${{ steps.gate-check.outputs.status }}" == "failed" ]]; then
            echo "❌ Quality Gate Failed: ${{ steps.gate-check.outputs.reason }}"
            exit 1
          else
            echo "✅ Quality Gate Passed: ${{ steps.gate-check.outputs.reason }}"
          fi

      - name: Create quality gate comment (PR only)
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.gate-check.outputs.status }}';
            const reason = '${{ steps.gate-check.outputs.reason }}';
            const icon = status === 'passed' ? '✅' : '❌';
            
            const body = `## ${icon} Quality Gate ${status === 'passed' ? 'Passed' : 'Failed'}
            
            **Reason:** ${reason}
            
            ### Test Results Summary
            - **Build:** ${{ needs.build.result }}
            - **Unit Tests:** ${{ needs.unit-tests.result }}
            - **Integration Tests:** ${{ needs.integration-tests.result }}
            - **E2E Tests:** ${{ needs.e2e-tests.result }}
            - **Visual Tests:** ${{ needs.visual-tests.result }}
            - **Performance Tests:** ${{ needs.performance-tests.result }}
            - **Security Scan:** ${{ needs.security-scan.result }}
            
            View detailed results in the [Actions tab](${context.payload.pull_request.html_url}/checks).`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Notification for test failures
  notify-failures:
    name: Notify Test Failures
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Send Slack notification (if configured)
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🚨 OrchFlow Test Pipeline Failed on '"${{ github.ref }}"'\n\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\nWorkflow: ${{ github.workflow }}\n\nView details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
            $SLACK_WEBHOOK_URL